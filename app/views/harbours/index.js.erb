// import { loadGeoJson } from '../../javascript/packs/map';

// STEP 1: init map
var mapElement = document.getElementById('map');
var map;
var mapStyle = [
  {
    "featureType": "poi",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  },
  {
    "featureType": "road",
    "elementType": "labels.icon",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  },
  {
    "featureType": "transit",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  }
];
function initMap() {
  if (mapElement) {
    map = new google.maps.Map(mapElement, {
          zoom: 6,
          center: {lat:46.52863469527167, lng:2.43896484375},
          // FR: {lat:46.52863469527167, lng:2.43896484375} // MRS: {lat: 43.3, lng: 5.4}
          styles: mapStyle
        });

  };
}

// STEP 2: load GeoJson UPDATED
// update value of geojson through dataset.geojson == data-geojson
mapElement.dataset.geojson = JSON.stringify(<%= @geojson.to_json.html_safe %>);

function loadGeoJson() {
  if (mapElement) {
    var jsonParsed = JSON.parse(mapElement.dataset.geojson);

    zoom();

    map.data.addGeoJson(jsonParsed);

    console.log("loaded GeoJson:");
    console.log(mapElement.dataset.geojson);
  };
}

// auto center map on data layer
function zoom() {
    // initialize the bounds
    var bounds = new google.maps.LatLngBounds();
    // loadGeoJson  runs asnchronously, listen to the addfeature-event
    google.maps.event.addListener(map.data, 'addfeature', function(e) {
        // check for points
        if (e.feature.getGeometry().getType() === 'Point') {
          // extend the bounds
          bounds.extend(e.feature.getGeometry().get());
        }
        // use the bounds
        map.fitBounds(bounds);
        // map.fitBounds(this.map.bounds);

        // adapt zoom to bounds
        // var z = map.getZoom();
        // console.log(z);
        zoomChangeBoundsListener =
            google.maps.event.addListenerOnce(map, 'bounds_changed', function(event) {
                if ( this.getZoom() > 10 ){   // or set a minimum
                    this.setZoom(10);  // set zoom here
                }
        });
        setTimeout(function(){google.maps.event.removeListener(zoomChangeBoundsListener)}, 2000);
        // var z = map.getZoom();
        // console.log(z);
      });
}

// STEP 3: set data style
function setFeaturesStyle() {
  if (mapElement) {
    maxTotvol();

    map.data.setStyle(function(feature) {
      var totalVolume = feature.getProperty('totvol');
      console.log('tot vol ' + feature.getProperty('name') +' = '+ totalVolume);
      return {
        icon: getCircle(totalVolume)
      };
    });
  };
}

// calculate total volume max of filtered features
var totalVolumeMax = 0;
function maxTotvol() {
  map.data.forEach(function(feature) {
    if (feature.getProperty('totvol') > totalVolumeMax) {
      totalVolumeMax = feature.getProperty('totvol');
    };
  });
  console.log('total vol max = '+ totalVolumeMax);
}

// show proportional markers (note: markers ares symbols == circles)
function getCircle(totalVolume) {
  return {
    path: google.maps.SymbolPath.CIRCLE,
    fillColor: 'blue',
    fillOpacity: .8,
    scale: calcScale(totalVolume),
    strokeColor: 'blue',
    strokeWeight: 1
  };
}

function calcScale(totalVolume) {
  var scale = (Math.sqrt(totalVolume * Math.pow(20, 2) / totalVolumeMax));
  // console.log('scale = '+ scale);
  return scale;
}

function loadSubfamilies1 () {

  var select2Subfamilies1 = '<%= @subfamilies1.to_json.html_safe %>'; // ok
  var subfamilies1Parsed = JSON.parse(select2Subfamilies1); // ok

  var select = document.querySelectorAll('#select2_subfamilies1'); // ok
  var options = document.querySelectorAll('#select2_subfamilies1 option'); // ok
  var selectId = document.getElementById('select2_subfamilies1'); // ok
  // notes for console.log(1)


  // delete all items of the native options // ok alone, not with appendChild
  // options.forEach(function(option) {
  //   option.value = "",
  //   option.innerText = ""
  //   });

  subfamilies1Parsed.forEach(function(sf) {
    var opt = document.createElement('option');
    var code;
    var label;
    for (var k in sf) {
      // console.log('key is: ' + k + ', value is: ' + sf[k]);
      if (k === "code") {
        code = sf[k];
      } else {
        label = sf[k];
      }
    }
    opt.value = code;
    opt.innerText = code.toUpperCase() + ' - ' + label.replace(/\b\w/g, l => l.toUpperCase());
    selectId.appendChild(opt);
  });
}


// execution
initMap();
loadGeoJson();
setFeaturesStyle();
loadSubfamilies1();


// notes for console.log(1)
  // console.log("new select2Subfamilies1:");
  // console.log(subfamilies1Parsed);
  // console.log(typeof subfamilies1Parsed);

  // console.log("temp select2Subfamilies1:"); // used for testing
  // console.log(document.getElementById('temp_subfamilies1').dataset.temp);
  // document.getElementById('temp_subfamilies1').dataset.temp = select2Subfamilies1 //ok

  // console.log("updated temp select2Subfamilies1:");
  // console.log(document.getElementById('temp_subfamilies1').dataset.temp); // ok
  // [{"code":"a1","label":"vrac liquide"},{"code":"a2","label":"vrac solide"},{"code":"a3","label":"non vrac"}]

  // console.log(options) // ok
